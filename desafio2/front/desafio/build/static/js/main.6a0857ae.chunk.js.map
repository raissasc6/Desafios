{"version":3,"sources":["logo.svg","App.js","services/AlunoService.js","components/ListaAlunoComponent.jsx","components/Aluno.jsx","serviceWorker.js","components/HeaderComponent.jsx","components/FooterComponent.jsx","index.js"],"names":["module","exports","App","ALUNO_API_URL","axios","get","id","aluno","ListaAlunoComponent","Component","props","state","alunos","AlunoService","getAlunos","then","res","setState","data","class","scope","this","map","key","id_aluno","nome_aluno","idade_aluno","role","aria-label","type","Boolean","window","location","hostname","match","HeaderComponent","FooterComponent","ReactDOM","render","className","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,kC,4KCyB5BC,I,8CCvBTC,EAAgB,+BA2BP,M,oGAtBP,OAAOC,IAAMC,IAAIF,EAAc,S,+BAG1BG,GACL,OAAOF,IAAMC,IAAIF,EAAcG,K,+BAG1BC,GACL,OAAOH,IAAMC,IAAIF,EAAc,UAAUI,K,+BAGpCA,GACL,OAAOH,IAAMC,IAAIF,EAAc,SAASI,K,+BAGnCD,GACL,OAAOF,IAAMC,IAAIF,EAAc,UAAUG,O,MCgClCE,GCnDKC,Y,kDDChB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAEDC,MAAM,CACPC,OAAO,IAJG,E,gEAQE,IAAD,OACfC,EAAaC,YAAYC,MAAK,SAACC,GAC3B,EAAKC,SAAS,CAACL,OAAQI,EAAIE,Y,+BAK/B,OACI,yBAAKC,MAAM,aACP,2BAAOA,MAAM,uBAC3B,+BACE,4BACE,wBAAIC,MAAM,OAAV,MACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,kBAGJ,+BAEQC,KAAKV,MAAMC,OAAOU,KACd,SAAAf,GAAK,OACL,wBAAIgB,IAAOhB,EAAMiB,UACf,wBAAIJ,MAAM,OAAOb,EAAMiB,UACvB,4BAAKjB,EAAMkB,YACX,4BAAKlB,EAAMmB,aACP,4BAAI,yBAAKP,MAAM,YAAYQ,KAAK,QAAQC,aAAW,iBAC/C,4BAAQC,KAAK,SAASV,MAAM,qBAA5B,UACA,4BAAQU,KAAK,SAASV,MAAM,kBAA5B,wB,GArCUV,cEQdqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICIWC,E,kDAlBf,WAAYzB,GAAO,IAAD,8BACd,cAAMA,IAEDC,MAAM,CACPC,OAAO,IAJG,E,qDASZ,OACF,yBAAKO,MAAM,aACT,sC,GAZsBV,aCmBb2B,E,kDAlBf,WAAY1B,GAAO,IAAD,8BACd,cAAMA,IAEDC,MAAM,CACPC,OAAO,IAJG,E,qDASZ,OACF,yBAAKO,MAAM,aACT,gCAAQ,6C,GAZcV,a,eCQ9B4B,IAASC,OACP,6BACE,kBAAC,IAAD,KACI,kBAAC,EAAD,MACA,yBAAKC,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAM,IAAIC,UAAajC,IAC9B,kBAAC,IAAD,CAAOgC,KAAM,UAAUC,UAAajC,IACpC,kBAAC,EAAD,QAGJ,kBAAC,EAAD,QAGNkC,SAASC,eAAe,SH0GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6a0857ae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import axios from 'axios';\n\nconst ALUNO_API_URL = \"http://localhost:8080/aluno/\";\n\nclass AlunoService{\n\n    getAlunos(){\n        return axios.get(ALUNO_API_URL+\"all\");\n    }\n\n    getAluno(id){\n        return axios.get(ALUNO_API_URL+id);\n    }\n\n    setAluno(aluno){\n        return axios.get(ALUNO_API_URL+\"update/\",aluno);\n    }\n\n    addAluno(aluno){\n        return axios.get(ALUNO_API_URL+\"salvar\",aluno);\n    }\n\n    delAluno(id){\n        return axios.get(ALUNO_API_URL+\"delete/\"+id);\n    }\n\n\n}\n\nexport default new AlunoService()","import React, { Component } from 'react';\nimport AlunoService from '../services/AlunoService';\n\n\nclass ListaAlunoComponent extends Component{\n    constructor(props){\n        super(props)\n\n        this.state={\n            alunos:[]\n        }\n    }\n\n    componentDidMount(){\n        AlunoService.getAlunos().then((res)=> {\n            this.setState({alunos: res.data});\n        });\n    }\n\n    render(){\n        return(\n            <div class=\"component\">\n                <table class=\"table table-striped\">\n  <thead>\n    <tr>\n      <th scope=\"col\">ID</th>\n      <th scope=\"col\">Nome</th>\n      <th scope=\"col\">Idade</th>\n      <th scope=\"col\">Opções</th>\n    </tr>\n  </thead>\n  <tbody>\n      {\n          this.state.alunos.map(\n              aluno =>\n              <tr key = {aluno.id_aluno}>\n                <th scope=\"row\">{aluno.id_aluno}</th>\n                <td>{aluno.nome_aluno}</td>\n                <td>{aluno.idade_aluno}</td>\n                    <td><div class=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n                        <button type=\"button\" class=\"btn btn-secondary\">Editar</button>\n                        <button type=\"button\" class=\"btn btn-danger\">Excluir</button>\n                    </div>\n                </td>\n                </tr>\n          )\n      }\n  </tbody>\n</table>\n            </div>\n        )\n    }\n}\n\n\nexport default ListaAlunoComponent\n","import React, { Component } from 'react';\nimport AlunoService from '../services/AlunoService';\n\n\nclass Aluno extends Component{\n  constructor(props){\n      super(props)\n\n      this.state={\n          alunos:[]\n      }\n  }\n\n  componentDidMount(){\n      AlunoService.getAlunos().then((res)=> {\n          this.setState({alunos: res.data});\n      });\n  }\n\n  render(){\n      return(\n    <div class=\"container\">\n      <form>\n          <div class=\"form-group\">\n            <label for=\"nome\"></label>\n            <input type=\"text\" class=\"form-control\" id=\"nome\" placeholder=\"Nome\" ></input>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"idade\">Another label</label>\n            <input type=\"text\" class=\"form-control\" id=\"idade\" placeholder=\"Idade\"></input>\n          </div>\n      </form>\n      <div class=\"btn-group\" role=\"group\" aria-label=\"buttons groups\">\n          <button type=\"button\" class=\"btn btn-outline-primary\" ><a href=\"index.html\">Cancelar</a></button>\n          <button type=\"button\" class=\"btn btn-outline-danger\">Salvar</button>\n      </div>  \n    </div>\n )\n}\n}\n\n\nexport default Aluno\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\n\n\nclass HeaderComponent extends Component{\n  constructor(props){\n      super(props)\n\n      this.state={\n          alunos:[]\n      }\n    }\n\n      render(){\n        return(\n      <div class=\"container\">\n        <header></header>\n      </div>\n   )\n  }\n  \n  \n}  \n  export default HeaderComponent\n  ","import React, { Component } from 'react';\n\n\nclass FooterComponent extends Component{\n  constructor(props){\n      super(props)\n\n      this.state={\n          alunos:[]\n      }\n    }\n\n      render(){\n        return(\n      <div class=\"container\">\n        <footer><p>Desafio2</p></footer>\n      </div>\n   )\n  }\n  \n  \n}  \n  export default FooterComponent\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Aluno from './components/Aluno';\nimport ListaAlunoComponent from './components/ListaAlunoComponent';\nimport * as serviceWorker from './serviceWorker';\nimport HeaderComponent from './components/HeaderComponent';\nimport FooterComponent from './components/FooterComponent';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\n\nReactDOM.render(\n  <div>\n    <Router>\n        <HeaderComponent></HeaderComponent>\n        <div className=\"container\">\n          <Switch>\n            <Route path =\"/\" component = {ListaAlunoComponent}></Route>\n            <Route path =\"/alunos\" component = {ListaAlunoComponent}></Route>\n            <ListaAlunoComponent></ListaAlunoComponent>\n          </Switch>\n        </div>\n        <FooterComponent></FooterComponent>\n    </Router>\n  </div>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}